# Dockerfile for poetry-based Python projects

FROM python:3.11-slim as python-base

# See: https://github.com/orgs/python-poetry/discussions/1879#discussioncomment-216865

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_NO_INTERACTION=1 \
    PYSETUP_PATH="/opt/pysetup" \
    VENV_PATH="/opt/pysetup/.venv"

ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"

# poetry-base is used for builder stages
FROM python-base as poetry-base
RUN apt-get update \
    && apt-get install --no-install-recommends -y \
        curl \
        build-essential

# install poetry - respects $POETRY_VERSION & $POETRY_HOME
ENV POETRY_VERSION=1.7.1
RUN curl -sSL https://install.python-poetry.org | python3 -

# We copy our Python requirements here to cache them
# and install only runtime deps using poetry
WORKDIR $PYSETUP_PATH

ARG PROJECT_DIR
COPY $PROJECT_DIR/pyproject.toml $PROJECT_DIR/poetry.lock ./
# install runtime deps - uses $POETRY_VIRTUALENVS_IN_PROJECT internally
RUN poetry install --no-dev

# Development stage
FROM python-base as development

# Copying poetry and venv from auth-builder stage
COPY --from=poetry-base $POETRY_HOME $POETRY_HOME
COPY --from=poetry-base $PYSETUP_PATH $PYSETUP_PATH

# Copying entrypoint script
COPY ./docker-entrypoint.poetry.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

# Venv already has runtime deps installed we get a quicker install
WORKDIR $PYSETUP_PATH
RUN poetry install

WORKDIR /app
COPY . .

ENTRYPOINT /docker-entrypoint.sh $0 $@
CMD ["flask", "--debug", "run", "--host=0.0.0.0", "--port=5000"]
